generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

generator pothosCrud {
  provider = "prisma-generator-pothos-codegen"
  generatorConfigPath = "./pothos.config.js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model aktivne_ulohy_odborky {
  aktivne_ulohy_odborky_id Int         @id @default(autoincrement())
  user_id                  Int
  stav_ulohy_id            Int
  uloha_id                 Int
  start_date               DateTime    @db.DateTime(0)
  end_date                 DateTime?   @db.DateTime(0)
  osobne_data              osobne_data @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_aktivne_ulohy_odborky_osobne_data1")
  stav_ulohy               stav_ulohy  @relation(fields: [stav_ulohy_id], references: [stav_ulohy_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_aktivne_ulohy_odborky_stav_ulohy1")
  ulohy                    ulohy       @relation(fields: [uloha_id], references: [uloha_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_aktivne_ulohy_odborky_ulohy1")

  @@index([user_id], map: "fk_aktivne_ulohy_odborky_osobne_data1_idx")
  @@index([stav_ulohy_id], map: "fk_aktivne_ulohy_odborky_stav_ulohy1_idx")
  @@index([uloha_id], map: "fk_aktivne_ulohy_odborky_ulohy1_idx")
}

model expertske_odborky {
  expertske_odborky_id                                 Int       @id @unique(map: "expertske_odborky_id_UNIQUE") @default(autoincrement())
  expertske_odborky_name                               String    @unique(map: "expertske_odborky_name_UNIQUE") @db.VarChar(50)
  expertske_odborky_foto                               String    @db.VarChar(255)
  program_program_expertske_odborkyToexpertske_odborky program[] @relation("program_expertske_odborkyToexpertske_odborky")
}

model osobne_data {
  user_id               Int                     @id
  meno                  String?                 @db.VarChar(50)
  priezvisko            String?                 @db.VarChar(50)
  adresa                String?                 @db.VarChar(255)
  mobil                 String?                 @db.VarChar(20)
  profile_foto          Bytes?                  @db.Blob
  potvrdenie            Boolean                 @default(false)
  aktivne_ulohy_odborky aktivne_ulohy_odborky[]
  users                 users                   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_osobne_data_user1")
  splneny_program       splneny_program[]
}

model program {
  program_id                                                     Int                @id @default(autoincrement())
  vekova_kat                                                     Int
  program_kat                                                    Int
  stupen                                                         Int?
  expertske_odborky                                              Int?
  program_name                                                   String             @db.VarChar(50)
  program_photo                                                  String             @unique(map: "program_photo_UNIQUE") @db.VarChar(255)
  program_info                                                   Json?
  expertske_odborky_program_expertske_odborkyToexpertske_odborky expertske_odborky? @relation("program_expertske_odborkyToexpertske_odborky", fields: [expertske_odborky], references: [expertske_odborky_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_program_expertske_odborky1")
  program_kat_program_program_katToprogram_kat                   program_kat        @relation("program_program_katToprogram_kat", fields: [program_kat], references: [program_kat_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_program_program_kat1")
  stupen_program_stupenTostupen                                  stupen?            @relation("program_stupenTostupen", fields: [stupen], references: [stupen_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_program_stupen1")
  vekova_kat_program_vekova_katTovekova_kat                      vekova_kat         @relation("program_vekova_katTovekova_kat", fields: [vekova_kat], references: [vekova_kat_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_program_vekova_kat1")
  splneny_program                                                splneny_program[]
  ulohy                                                          ulohy[]

  @@index([expertske_odborky], map: "fk_program_expertske_odborky1_idx")
  @@index([program_kat], map: "fk_program_program_kat1_idx")
  @@index([stupen], map: "fk_program_stupen1_idx")
  @@index([vekova_kat], map: "fk_program_vekova_kat1_idx")
}

model program_kat {
  program_kat_id                           Int       @id @unique(map: "program_kat_id_UNIQUE") @default(autoincrement())
  program_kat_name                         String    @unique(map: "program_kat_name_UNIQUE") @db.VarChar(50)
  program_program_program_katToprogram_kat program[] @relation("program_program_katToprogram_kat")
}

model roles {
  role_id   Int     @id @default(autoincrement())
  role_name String  @db.VarChar(50)
  users     users[]
}

model splneny_program {
  splneny_program_id Int         @id @default(autoincrement())
  user_id            Int
  program_id         Int
  osobne_data        osobne_data @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_splneny_program_osobne_data1")
  program            program     @relation(fields: [program_id], references: [program_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_splneny_program_program1")

  @@index([user_id], map: "fk_splneny_program_osobne_data1_idx")
  @@index([program_id], map: "fk_splneny_program_program1_idx")
}

model stav_ulohy {
  stav_ulohy_id         Int                     @id
  stav_ulohy_name       String                  @db.VarChar(45)
  aktivne_ulohy_odborky aktivne_ulohy_odborky[]
}

model stupen {
  stupen_id                      Int       @id @unique(map: "stupen_id_UNIQUE") @default(autoincrement())
  stupen_name                    String    @unique(map: "stupen_name_UNIQUE") @db.VarChar(50)
  program_program_stupenTostupen program[] @relation("program_stupenTostupen")
}

model ulohy {
  uloha_id               Int                     @id @default(autoincrement())
  program_id             Int
  cislo_ulohy            Int
  text_ulohy             String                  @db.VarChar(500)
  potrebny_pocet_poduloh Int?
  podulohy               Json?
  aktivne_ulohy_odborky  aktivne_ulohy_odborky[]
  program                program                 @relation(fields: [program_id], references: [program_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ulohy_program1")

  @@index([program_id], map: "fk_ulohy_program1_idx")
}

model users {
  user_id           Int          @id @default(autoincrement())
  roles_role_id     Int?
  email             String       @unique(map: "email_UNIQUE") @db.VarChar(100)
  password          String       @db.VarChar(255)
  datum_registracie DateTime?    @db.DateTime(0)
  osobne_data       osobne_data?
  roles             roles?       @relation(fields: [roles_role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_roles")

  @@index([roles_role_id], map: "fk_user_roles_idx")
}

model vekova_kat {
  vekova_kat_id                          Int       @id @unique(map: "vekova_kat_id_UNIQUE") @default(autoincrement())
  vekova_kat_name                        String    @unique(map: "vekova_kat_name_UNIQUE") @db.VarChar(50)
  program_program_vekova_katTovekova_kat program[] @relation("program_vekova_katTovekova_kat")
}
